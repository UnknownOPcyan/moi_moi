import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';

export async function POST(req: NextRequest) {
    try {
        const { telegramId, action } = await req.json();

        if (!telegramId) {
            return NextResponse.json({ error: 'Invalid telegramId' }, { status: 400 });
        }

        if (action === 'start') {
            // Start farming: only set the farm start time
            await prisma.user.update({
                where: { telegramId },
                data: { farmStartTime: new Date() }
            });

            return NextResponse.json({ success: true, status: 'farming_started' });
        } else if (action === 'claim') {
            // Claim the accumulated points after 60 seconds
            const user = await prisma.user.findUnique({ where: { telegramId } });

            if (!user || !user.farmStartTime) {
                return NextResponse.json({ error: 'User not farming' }, { status: 400 });
            }

            // Calculate total accumulated points (3 PixelDogs after 60 seconds)
            const farmingDuration = Math.floor((new Date().getTime() - user.farmStartTime.getTime()) / 1000);
            const farmedPoints = Math.min(3, (farmingDuration * 0.05).toFixed(2)); // Incremental farming logic

            const updatedUser = await prisma.user.update({
                where: { telegramId },
                data: {
                    points: { increment: farmedPoints },  // Add accumulated points to total
                    farmStartTime: null // Reset farming status
                }
            });

            return NextResponse.json({
                success: true,
                points: updatedUser.points,
                status: 'farming_complete'
            });
        }

        return NextResponse.json({ error: 'Invalid action' }, { status: 400 });
    } catch (error) {
        console.error('Error during farming process:', error);
        return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
    }
}